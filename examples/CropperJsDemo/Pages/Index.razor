@page "/"
@using System.IO;
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Hosting;
@inject IWebHostEnvironment _env;

@using Microsoft.JSInterop
@inject IJSRuntime JS;
@implements IAsyncDisposable;


<h1>Crooperjs integration demo</h1>

<div class="container">
    <div class="row">
        <div class="col mw-100">
            <fieldset class="border rounded p-3">
                <legend>HTML5 canvas</legend>
                <form>
                    <div class="form-row align-items-center">
                        <p>
                          <InputFile id="@_fileInputId" accept="image/*" />
                          <input type="button" @ref="cropButton" value="Crop" />
                          <input type="button" @ref="restoreButton" value="Restore" />
                        </p>
                        <div>
                          <canvas @ref="canvas">
                            Your browser does not support the HTML5 canvas element.
                          </canvas>
                        </div>           
                        <div @ref="resultContainer"></div>
                    </div>
                </form>
            </fieldset>
        </div>
        <div class="col">
            <fieldset class="border rounded p-3">
                <legend>Custom Drag & Drop Image Upload</legend>
            </fieldset>
        </div>
    </div>
</div>

@code {

    ElementReference canvas;
    ElementReference cropButton;
    ElementReference restoreButton;
    ElementReference resultContainer;

    private readonly string _fileInputId = Guid.NewGuid().ToString();
    
    IJSObjectReference _cropperJsModule;
    DotNetObjectReference<Index> _dotNetInvokeRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var importPath = "/js/";
            _cropperJsModule = await JS.InvokeAsync<IJSObjectReference>("import", $"{importPath}/canvasCropper.js");
            _dotNetInvokeRef = DotNetObjectReference.Create(this);

            await _cropperJsModule.InvokeVoidAsync("initCropper", canvas, cropButton, restoreButton,resultContainer, _fileInputId, _dotNetInvokeRef);
        }
    }

    [JSInvokable]
    public void CroppedHandler(string dataUrl)
    {
        var (binary, ext) = ConvertImageDataUrl(dataUrl);

        SaveFile(binary, $"{Guid.NewGuid()}_cropped.{ext}");
    }

    private static (byte[] binary, string ext) ConvertImageDataUrl(string dataUrl)
    {
        var matchGroups= Regex.Match(dataUrl, @"data:image/(?<file_type>\w+?)(;(?<encode>\w+?))?,(?<data>.+)").Groups;
        var ext = matchGroups["file_type"].Value;
        var base64Data = matchGroups["data"].Value;
        var binary = Convert.FromBase64String(base64Data);
        return (binary, ext);
    }
    
    private void SaveFile(byte[] binary, string fileName)
    {
        var uploadDirPath = Path.Combine(_env.WebRootPath, "uploads");
        var dir = new DirectoryInfo(uploadDirPath);
        if (!dir.Exists)
        {
            dir.Create();
        }

        var uploadFilePath = Path.Combine(uploadDirPath, fileName);
        File.WriteAllBytes(uploadFilePath, binary);
    }



    public async ValueTask DisposeAsync()
    {
        _dotNetInvokeRef?.Dispose();
        
        if (_cropperJsModule != null)
        {
            await _cropperJsModule.DisposeAsync().ConfigureAwait(false);
        }
    }
}