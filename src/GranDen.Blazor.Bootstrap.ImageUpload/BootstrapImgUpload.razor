@using Microsoft.JSInterop
@inject IJSRuntime JS;
@implements IAsyncDisposable;

<div class="@ContainerCssClass">
    @if (ShowPreview)
    {
        <div class="p-1">
            <img @ref="previewImg" class="@PreviewImgCssClass" src="" alt="@_previewImgAltText"/>
        </div>
    }
    <div class="p-1">
        <div class="custom-file">
            <InputFile id="@_fileUploadId"
                       class="custom-file-input"
                       accept="@AcceptPattern"
                       OnChange="OnInputFileChange"/>
            <label for="@_fileUploadId"
                   class="custom-file-label"
                   data-browse="@ButtonUiLabel">
                <span class="d-inline-block text-truncate w-100">@_prompt</span>
            </label>
        </div>
    </div>
</div>

@code {

    /// <summary>
    /// Initial prompt text when the whole component shown up
    /// </summary>
    [Parameter]
    public string DefaultPrompt { get; set; } = "Choose file";

    /// <summary>
    /// Outer Container CSS class, default is "d-flex flex-column justify-content-center"
    /// </summary>
    [Parameter]
    public string ContainerCssClass { get; set; } = "d-flex flex-column justify-content-center";

    /// <summary>
    /// Tooggle the preview img panel 
    /// </summary>
    [Parameter]
    public bool ShowPreview { get; set; } = false;

    /// <summary>
    /// Preview Img css class string
    /// </summary>
    [Parameter]
    public string PreviewImgCssClass { get; set; } = "img-thumbnail";

    /// <summary>
    /// Upload Button display string
    /// </summary>
    [Parameter]
    public string ButtonUiLabel { get; set; } = "Browse";

    /// <summary>
    /// File filter when choosing file via open file dialog of OS
    /// </summary>
    [Parameter]
    public string AcceptPattern { get; set; } = "image/*";

    /// <summary>
    /// Upload File selection change event
    /// </summary>
    [Parameter]
    public EventCallback<InputFileChangeEventArgs> InputFileChanged { get; set; }

    private string _prompt;
    private string _previewImgAltText;
    IJSObjectReference _blobUtilModule;

    private readonly string _fileUploadId = Guid.NewGuid().ToString();
    ElementReference previewImg;

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (string.IsNullOrEmpty(_prompt) && !string.IsNullOrEmpty(DefaultPrompt))
        {
            _prompt = DefaultPrompt;
        }
    }

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            var importPath = $"./_content/{typeof(BootstrapImgUpload).Assembly.GetName().Name}";
            _blobUtilModule = await JS.InvokeAsync<IJSObjectReference>("import", $"{importPath}/imgPreviewUtil.js");

            if (ShowPreview)
            {
                await _blobUtilModule.InvokeVoidAsync("hookFileUploadEvent", previewImg, _fileUploadId);
            }
            else
            {
                await _blobUtilModule.InvokeVoidAsync("hookFileUploadEvent", null, _fileUploadId);
            }
        }
    }

    private Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var fileName = e.File.Name;
        _previewImgAltText = _prompt = fileName;

        return InputFileChanged.InvokeAsync(e);
    }


    /// <inheritdoc />
    public async ValueTask DisposeAsync()
    {
        if (_blobUtilModule != null)
        {
            await _blobUtilModule.DisposeAsync().ConfigureAwait(false);
        }
    }

}