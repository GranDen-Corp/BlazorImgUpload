@using Microsoft.JSInterop
@inject IJSRuntime JS;
@implements IAsyncDisposable;

<div class="d-flex flex-column justify-content-center">
    <div class="btn-toolbar" role="toolbar">
        <div class="btn-group mr-2" role="group">
            <input type="button" @ref="cropButton" value="@CropButtonLabel"/>
            <input type="button" @ref="restoreButton" value="@ResetFileButtonLabel"/>
        </div>
    </div>
    <div class="p-1">
        <canvas @ref="canvas">
            Your browser does not support the HTML5 canvas element.
        </canvas>
    </div>
    <div class="p-1">
        <div class="custom-file">
            <InputFile id="@_fileUploadId"
                       class="custom-file-input"
                       accept="@AcceptPattern"
                       OnChange="OnInputFileChange"/>
            <label for="@_fileUploadId"
                   class="custom-file-label"
                   data-browse="@SrcFileButtonLabel">
                @_prompt
            </label>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string DefaultPrompt { get; set; } = "Choose file";

    [Parameter]
    public string DefaultPreviewImgCSS { get; set; } = "img-thumbnail";

    [Parameter]
    public string SrcFileButtonLabel { get; set; } = "Browse";

    [Parameter]
    public string CropButtonLabel { get; set; } = "Crop";

    [Parameter]
    public string ResetFileButtonLabel { get; set; } = "Browse";

    [Parameter]
    public string AcceptPattern { get; set; } = "image/*";

    [Parameter]
    public (uint width, uint height) MaxDimension { get; set; } = ( width: 1024, height: 1024);

    [Parameter]
    public EventCallback<InputFileChangeEventArgs> InputFileChanged { get; set; }

    private string _prompt;

    ElementReference cropButton;
    ElementReference restoreButton;
    ElementReference canvas;
    private readonly string _fileInputId = Guid.NewGuid().ToString();

    IJSObjectReference _cropperJsModule;
    DotNetObjectReference<BootstapImageCrop> _dotNetInvokeRef;

    Guid _fileUploadId = Guid.NewGuid();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            var importPath = $"./_content/{typeof(BootstapImageCrop).Assembly.GetName().Name}";
            _cropperJsModule = await JS.InvokeAsync<IJSObjectReference>("import", $"{importPath}/canvasCropper.js");
            _dotNetInvokeRef = DotNetObjectReference.Create(this);

            await _cropperJsModule.InvokeVoidAsync("initCropper", canvas, cropButton, restoreButton, _fileInputId, _dotNetInvokeRef, MaxDimension);
        }
    }

    private Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        _prompt = e.File.Name;

        return InputFileChanged.InvokeAsync(e);
    }

    public async ValueTask DisposeAsync()
    {
        _dotNetInvokeRef?.Dispose();

        if (_cropperJsModule != null)
        {
            await _cropperJsModule.DisposeAsync().ConfigureAwait(false);
        }
    }

}